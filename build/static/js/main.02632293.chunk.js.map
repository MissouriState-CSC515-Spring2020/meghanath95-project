{"version":3,"sources":["nature.jpg","lakes.jpeg","animal.jpg","forest.jpg","Nav.js","Nature.js","Lakes.js","Animal.js","Forest.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","navstyle","color","className","style","to","Nature","src","nature","Lakes","lakes","Animal","animal","Forest","forest","Home","App","path","exact","component","Animals","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8EAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,yJCuB5BC,MAnBf,WAEI,IAAMC,EAAW,CACbC,MAAO,SAGb,OACM,6BACI,6CACA,wBAAIC,UAAY,aACZ,kBAAC,IAAD,CAAMC,MAAOH,EAAUI,GAAG,WAAU,uCACpC,kBAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAG,UAAS,sCACnC,kBAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAG,YAAW,wCACrC,kBAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAG,WAAU,0C,iBCJrCC,MATf,WACE,OACE,6BACE,8CACA,yBAAKC,IAAOC,Q,iBCKHC,MATf,WACE,OACE,6BACE,6CACA,yBAAKF,IAAOG,Q,iBCKHC,MATf,WACE,OACE,6BACE,8CACA,yBAAKJ,IAAOK,Q,iBCKHC,MATf,WACE,OACE,6BACE,8CACA,yBAAKN,IAAOO,Q,OCkBlB,IAAMC,EAAO,kBACX,6BACE,iDAIWC,EAvBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKb,UAAY,OACf,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOc,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,UAAUE,UAAWb,IACjC,kBAAC,IAAD,CAAOW,KAAK,SAASE,UAAWV,IAChC,kBAAC,IAAD,CAAOQ,KAAK,WAAWE,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAK,UAAUE,UAAWN,QCPxBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.02632293.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nature.53f3dd9b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/lakes.331a33be.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/animal.adba01c8.jpg\";","module.exports = __webpack_public_path__ + \"static/media/forest.fe078fce.jpg\";","import React from 'react';\nimport './App.css';\nimport { Link } from 'react-router-dom';\n\nfunction Nav() {\n\n    const navstyle = {\n        color: 'white'\n    };\n\n  return (\n        <nav>\n            <h3>Image Gallery</h3>\n            <ul className = \"nav-links\">\n                <Link style={navstyle} to=\"/nature\"><li>Nature</li></Link>\n                <Link style={navstyle} to=\"/lakes\"><li>Lakes</li></Link>\n                <Link style={navstyle} to=\"/animals\"><li>Animals</li></Link>\n                <Link style={navstyle} to=\"/forest\"><li>Forest</li></Link>\n            </ul>\n        </nav>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport nature from '../src/nature.jpg';\nimport './App.css';\n\nfunction Nature() {\n  return (\n    <div>\n      <h1>Nature Gallery</h1>\n      <img src = {nature}></img>\n    </div>\n  );\n}\n\nexport default Nature;\n","import React from 'react';\nimport lakes from '../src/lakes.jpeg';\nimport './App.css';\n\nfunction Lakes() {\n  return (\n    <div>\n      <h1>Lakes Gallery</h1>\n      <img src = {lakes}></img>\n    </div>\n  );\n}\n\nexport default Lakes;\n","import React from 'react';\nimport animal from '../src/animal.jpg';\nimport './App.css';\n\nfunction Animal() {\n  return (\n    <div>\n      <h1>Animal Gallery</h1>\n      <img src = {animal}></img>\n    </div>\n  );\n}\n\nexport default Animal;\n","import React from 'react';\nimport forest from '../src/forest.jpg';\nimport './App.css';\n\nfunction Forest() {\n  return (\n    <div>\n      <h1>Forest Gallery</h1>\n      <img src = {forest}></img>\n    </div>\n  );\n}\n\nexport default Forest;\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\nimport Nature from './Nature';\nimport Lakes from './Lakes';\nimport Animals from './Animal';\nimport Forest from './Forest';\nimport {BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <div className = \"App\"> \n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={Home}/>\n          <Route path=\"/nature\" component={Nature} />\n          <Route path=\"/lakes\" component={Lakes} />\n          <Route path=\"/animals\" component={Animals} />\n           <Route path=\"/forest\" component={Forest} />\n        </Switch>\n      </div>\n    </Router> \n  );\n}\n\nconst Home = () => (\n  <div>\n    <h1>Categories Page</h1>\n  </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}